What happens when you initialize a repository? Why do you need to do it?

when i initialize a repository, a .git file is created, and metadata about selected files can be created and saved.
no commits are created, because git doesn't create commits for you.



How is the staging area different from the working directory and the repository? What value do you think it offers?

the staging area is different from the working directory because the files in it can be used in commit to repository, and it's different from the repository because the files in it haven't been committed yet. you can select which files will be committed, not all files in directory will have a snapshot..

i think it offers clarity and a way to build logic connections or understand them in your mind before doing actual commit.



How can you use the staging area to make sure you have one commit per logical change?

i can use the staging area to make sure i have one commit per logical change by verifying that the only files in the staging area are connected to a single logical commit. can use 'git diff  --staging' to see all changes which will be committed.



What are some situations when branches would be helpful in keeping your history organized? How would branches help?

branches are helpfull when working on something that shouldn't be in the master.
example - experimental features, personal project changes.
this means that the project can be continued in the master without unneeded/unhelpfull changes. 


How do the diagrams help you visualize the branch structure?

the diagrams help visualize the branch structure by seeing after which commit each branch started on the master and how many branches exist.